# -*- coding: utf-8 -*-
"""p01_이한정_20191650.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yh24WOZ6ELBh2jt43Z4GAUw17L1sX0jQ
"""

import torch
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/gdrive')

# Task 1-1. 데이터 불러오기
data = pd.read_csv("/content/gdrive/My Drive/p01_input.csv", encoding='cp949')

# Task 1-2. 데이터 중에서 키와 몸무게 데이터만 골라내기
data = data[['키', '몸무게']] 
data = data.rename(columns = {'키':'height', '몸무게':'weight'})

# 데이터타입을 숫자로 변경
data.height = pd.to_numeric(data.height) 
data.weight = pd.to_numeric(data.weight) 

# 결측값이 들어있는 행 전체 삭제하기
data = data.dropna(axis = 0)

# Task 2. 키, 몸무게 평균 구하기
height_mean = data.height.mean() 
weight_mean = data.weight.mean()
print("학생들의 평균 키는", height_mean,", 평균 몸무게는", weight_mean, "입니다.")

#print(data.isnull().sum())
data

# Task 3. 키와 몸무게 사이의 상관관계 (Pearson Correlation Coefficient) 구하기
def pearson_similarity(u1, u2):
    u1_c = u1 - u1.mean()
    u2_c = u2 - u2.mean()
    denom = np.sqrt(np.sum(u1_c ** 2) * np.sum(u2_c ** 2))
    if denom != 0:
      return np.sum(u1_c * u2_c)/denom
    else:
      return 0

pearson_similarity(data.height, data.weight)

# Task 4. Linear Regression을 사용하여 키와 몸무게 사이의 선형관계를 찾기(= 직선의 방정식 구하기: y = wx + b에서 w와 b값 구하기)
# Task 4-1. 가설, 비용 설정하기
W = torch.zeros(1,1)
b = torch.zeros(1,1)

lr_W = 0.0000095
lr_b = 0.13

heights = torch.FloatTensor([data.height]).T
weights = torch.FloatTensor([data.weight]).T

for epoch in range(3001):
  W.requires_grad_(True)
  b.requires_grad_(True)

  hypothesis = torch.mm(heights, W) + b
  cost = torch.mean((hypothesis - weights) ** 2)

  # Task 4-2. 경사하강법으로 비용을 최소로 만들도록 학습하기(torch.optim 사용하지 말고 직접 구현)
  cost.backward()
  with torch.no_grad() as grd:
    W = W - lr_W * W.grad
    b = b - lr_b * b.grad

  if epoch % 100 == 0:
    print( 'epoch: {}, cost: {:.6f}, W: {}, b: {}' .format(epoch, cost.item(), W.squeeze(), b.squeeze()))

# Task 5. Matplotlib을 사용하여 좌표평면상에 입력값(키, 몸무게)과 구한 직선을 그려보기
# Task 5-1. 입력값(키, 몸무게)를 산포도로 그리기(x축=키, y축=몸무게)
scatter = plt.scatter(data.height, data.weight, color = 'cornflowerblue')

# Task 5-2. w와 b값을 이용하여 직선 그리기(산포도와 일치하는지 확인하여 학습이 잘 되었는지 확인하기 위함)
x = torch.FloatTensor([data.height]).T
y = torch.mm(heights, W) + b
plt.title("Students Body Data")
plt.xlabel("Height")
plt.ylabel("Weight")
plt.plot(x, y, color = 'y')
plt.show()